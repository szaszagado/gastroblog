import { Buffer } from 'buffer';
/**
 * A class representation of the BSON Binary type.
 * @public
 */
export declare class Binary {
    _bsontype: 'Binary';
    /* Excluded from this release type: BSON_BINARY_SUBTYPE_DEFAULT */
    /** Initial buffer default size */
    static readonly BUFFER_SIZE = 256;
    /** Default BSON type */
    static readonly SUBTYPE_DEFAULT = 0;
    /** Function BSON type */
    static readonly SUBTYPE_FUNCTION = 1;
    /** Byte Array BSON type */
    static readonly SUBTYPE_BYTE_ARRAY = 2;
    /** Deprecated UUID BSON type @deprecated Please use SUBTYPE_UUID */
    static readonly SUBTYPE_UUID_OLD = 3;
    /** UUID BSON type */
    static readonly SUBTYPE_UUID = 4;
    /** MD5 BSON type */
    static readonly SUBTYPE_MD5 = 5;
    /** Encrypted BSON type */
    static readonly SUBTYPE_ENCRYPTED = 6;
    /** Column BSON type */
    static readonly SUBTYPE_COLUMN = 7;
    /** User BSON type */
    static readonly SUBTYPE_USER_DEFINED = 128;
    buffer: Buffer;
    sub_type: number;
    position: number;
    /**
     * @param buffer - a buffer object containing the binary data.
     * @param subType - the option binary type.
     */
    constructor(buffer?: string | BinarySequence, subType?: number);
    /**
     * Updates this binary with byte_value.
     *
     * @param byteValue - a single byte we wish to write.
     */
    put(byteValue: string | number | Uint8Array | Buffer | number[]): void;
    /**
     * Writes a buffer or string to the binary.
     *
     * @param sequence - a string or buffer to be written to the Binary BSON object.
     * @param offset - specify the binary of where to write the content.
     */
    write(sequence: string | BinarySequence, offset: number): void;
    /**
     * Reads **length** bytes starting at **position**.
     *
     * @param position - read from the given position in the Binary.
     * @param length - the number of bytes to read.
     */
    read(position: number, length: number): BinarySequence;
    /**
     * Returns the value of this binary as a string.
     * @param asRaw - Will skip converting to a string
     * @remarks
     * This is handy when calling this function conditionally for some key value pairs and not others
     */
    value(asRaw?: boolean): string | BinarySequence;
    /** the length of the binary sequence */
    length(): number;
    toJSON(): string;
    toString(format?: string): string;
    /* Excluded from this release type: toExtendedJSON */
    toUUID(): UUID;
    /* Excluded from this release type: fromExtendedJSON */
    inspect(): string;
}
/** @public */
export declare interface BinaryExtended {
    $binary: {
        subType: string;
        base64: string;
    };
}
/** @public */
export declare interface BinaryExtendedLegacy {
    $type: string;
    $binary: string;
}
/** @public */
export declare type BinarySequence = Uint8Array | Buffer | number[];
/**
 * BSON default export
 * @deprecated Please use named exports
 * @privateRemarks
 * We want to someday deprecate the default export,
 * so none of the new TS types are being exported on the default
 * @public
 */
declare const BSON: {
    Binary: typeof Binary;
    Code: typeof Code;
    DBRef: typeof DBRef;
    Decimal128: typeof Decimal128;
    Double: typeof Double;
    Int32: typeof Int32;
    Long: typeof Long;
    UUID: typeof UUID;
    Map: MapConstructor;
    MaxKey: typeof MaxKey;
    MinKey: typeof MinKey;
    ObjectId: typeof ObjectId;
    ObjectID: typeof ObjectId;
    BSONRegExp: typeof BSONRegExp;
    BSONSymbol: typeof BSONSymbol;
    Timestamp: typeof Timestamp;
    EJSON: typeof EJSON;
    setInternalBufferSize: typeof setInternalBufferSize;
    serialize: typeof serialize;
    serializeWithBufferAndIndex: typeof serializeWithBufferAndIndex;
    deserialize: typeof deserialize;
    calculateObjectSize: typeof calculateObjectSize;
    deserializeStream: typeof deserializeStream;
    BSONError: typeof BSONError;
    BSONTypeError: typeof BSONTypeError;
};
export default BSON;
/* Excluded from this release type: BSON_BINARY_SUBTYPE_BYTE_ARRAY */
/* Excluded from this release type: BSON_BINARY_SUBTYPE_COLUMN */
/* Excluded from this release type: BSON_BINARY_SUBTYPE_DEFAULT */
/* Excluded from this release type: BSON_BINARY_SUBTYPE_ENCRYPTED */
/* Excluded from this release type: BSON_BINARY_SUBTYPE_FUNCTION */
/* Excluded from this release type: BSON_BINARY_SUBTYPE_MD5 */
/* Excluded from this release type: BSON_BINARY_SUBTYPE_USER_DEFINED */
/* Excluded from this release type: BSON_BINARY_SUBTYPE_UUID */
/* Excluded from this release type: BSON_BINARY_SUBTYPE_UUID_NEW */
/* Excluded from this release type: BSON_DATA_ARRAY */
/* Excluded from this release type: BSON_DATA_BINARY */
/* Excluded from this release type: BSON_DATA_BOOLEAN */
/* Excluded from this release type: BSON_DATA_CODE */
/* Excluded from this release type: BSON_DATA_CODE_W_SCOPE */
/* Excluded from this release type: BSON_DATA_DATE */
/* Excluded from this release type: BSON_DATA_DBPOINTER */
/* Excluded from this release type: BSON_DATA_DECIMAL128 */
/* Excluded from this release type: BSON_DATA_INT */
/* Excluded from this release type: BSON_DATA_LONG */
/* Excluded from this release type: BSON_DATA_MAX_KEY */
/* Excluded from this release type: BSON_DATA_MIN_KEY */
/* Excluded from this release type: BSON_DATA_NULL */
/* Excluded from this release type: BSON_DATA_NUMBER */
/* Excluded from this release type: BSON_DATA_OBJECT */
/* Excluded from this release type: BSON_DATA_OID */
/* Excluded from this release type: BSON_DATA_REGEXP */
/* Excluded from this release type: BSON_DATA_STRING */
/* Excluded from this release type: BSON_DATA_SYMBOL */
/* Excluded from this release type: BSON_DATA_TIMESTAMP */
/* Excluded from this release type: BSON_DATA_UNDEFINED */
/* Excluded from this release type: BSON_INT32_MAX */
/* Excluded from this release type: BSON_INT32_MIN */
/* Excluded from this release type: BSON_INT64_MAX */
/* Excluded from this release type: BSON_INT64_MIN */
/** @public */
export declare class BSONError extends Error {
    constructor(message: string);
    readonly name: string;
}
/**
 * A class representation of the BSON RegExp type.
 * @public
 */
export declare class BSONRegExp {
    _bsontype: 'BSONRegExp';
    pattern: string;
    options: string;
    /**
     * @param pattern - The regular expression pattern to match
     * @param options - The regular expression options
     */
    constructor(pattern: string, options?: string);
    static parseOptions(options?: string): string;
}
/** @public */
export declare interface BSONRegExpExtended {
    $regularExpression: {
        pattern: string;
        options: string;
    };
}
/** @public */
export declare interface BSONRegExpExtendedLegacy {
    $regex: string | BSONRegExp;
    $options: string;
}
/**